#! /usr/bin/env tclsh

###############################################################################
# 0t: utilities/shortcuts for the graphical shell

source $::env(HOME)/bin/lib.tcl

need notify-send rg \
     fnottctl \
     firefox \
     bluetoothctl \
     ifstat \
     light \
     tofi-drun \
     setxkbmap \
     grim slurp swappy \
     ponymix

set SUDO /usr/sbin/sudo

###############################################################################

proc __nrep {name} {
  # helper: replacement id for notify-send
  catch {exec fnottctl list | rg ": $name" -r {}} id ret
  if {0 != [dict get $ret -code]} {
    return {}
  }
  return "-r $id"
}

###############################################################################

# for wm
proc _firefox {} {
  try {
    exec firefox --private-window --profile "$::env(HOME)/opt/firefox_proxy"
  } on error e { fail "$e" }
}

###############################################################################

# for wm, replaces lum
proc _lum- {} {
  set title lum
  exec sleep 0.1
  exec notify-send {*}[__nrep $title] -u low -i redshift-status-off $title "[format %.0f [exec light -G]]"
}

###############################################################################

# for wm, replaces lum
proc _lum+ {} {
  set title lum
  exec sleep 0.1
  exec notify-send {*}[__nrep $title] -u low -i redshift-status-on $title "[format %.0f [exec light -G]]"
}

###############################################################################

# for wm
proc _run {} {
  try {
    exec tofi-drun \
--font $::env(XDG_DATA_HOME)/fonts/agave/Agave-Bold-slashed.ttf \
--hint-font=false \
{--height=100%} {--width=100%} \
{--padding-left=40%} {--padding-top=25%} \
--border-width=0 --outline-width=0 \
--num-results=16 \
--result-spacing=16 \
--background-color=000000a0 \
--input-color=d2d6deff \
--prompt-color=d2d6deff \
--selection-color=ffffffff \
--text-color=b9bdc5ff \
--drun-launch=true \
--fuzzy-match=true \
--late-keyboard-init \
{--prompt-text=> }
  } on error e { fail "$e" }
}

###############################################################################

# for waybar
proc btbat {{id {}}} {
  set k          DD:A5:E3:61:B3:96
  set earfun     00:12:6F:EE:F0:F7
  set sennheiser 00:1B:66:8C:6C:44
  set jlab       07:69:A1:11:E5:5D
  set jbl        B0:F1:A3:63:0A:66

  proc die {} {
    global ME
    upvar k k earfun earfun sennheiser sennheiser jlab jlab jbl jbl

    puts stderr "$ME: mac address required
  available devices:
  k          - Corne keyboard       $k
  earfun     - EarFun Free Pro 2    $earfun
  sennheiser - Sennheiser CX 6.00BT $sennheiser
  jlab       - Epic Air Sport ANC   $jlab
  jbl        - JBL Clip 2           $jbl"
    puts {}
    exit
  }

  try { eval set mac $$id } trap {} {} { die }
  if {{} eq $id} { die }

  catch {exec bluetoothctl info $mac | rg {Connected: yes}} {} ret
  if {0 != [dict get $ret -code]} { puts {}; exit }

  regsub -all {:} $mac {_} mac
  set icon { }
  if {{k} eq $id} { set icon { } }
  set blue "dbus-send --print-reply=literal --system --dest=org.bluez /org/bluez/hci0/dev_$mac"
  catch {exec {*}$blue org.freedesktop.DBus.Introspectable.Introspect | rg {Battery1}} {} ret
  if {0 != [dict get $ret -code]} { puts {}; exit }

  puts "$icon[lindex [exec {*}$blue org.freedesktop.DBus.Properties.Get string:org.bluez.Battery1 string:Percentage] end]"
}

###############################################################################

# for waybar
proc cpu {} {
  set dir /sys/devices/system/cpu/cpu0
  set gov [readfile $dir/cpufreq/scaling_governor]
  #set epb [readfile $dir/power/energy_perf_bias]
  switch -- [string index $gov 1] {
    e { set gov {*}}
    o { set gov {.}}
    default { set gov {?}}
  }
  #puts "$gov$epb"
  puts $gov
}

###############################################################################

proc lay {arg} {
  global SESS

  if {{x} ne $SESS} {
    exec notify-send -u low -i preferences-desktop-keyboard key {xorg not running}
    exit
  }

  switch -- $arg {
    h - hsnt {
      set arg hsnt
      exec setxkbmap hsnt
      exec xset r rate 250 30
    }
    q - qwerty - u - us {
      set arg qwerty
      exec setxkbmap -option ctrl:nocaps us
      exec xset r rate 250 30
    }
    default {
      ufail {lay h_snt|q_werty}
    }
  }
  exec notify-send -u low -i cinnamon-virtual-keyboard key $arg
}

###############################################################################

# for wm
proc lum {arg} {
  set title lum
  set cmd {light}
  set cmd_set {-S}
  set cmd_dec {-U}
  set cmd_inc {-A}
  set cmd_get {-G}
  set cmd_sub $cmd
  set notify {notify-send -u low -i redshift-status-}

  switch -- [string index $arg 0] {
    {} { append notify on }
    - { append cmd_sub " $cmd_dec"; append notify off }
    + { append cmd_sub " $cmd_inc"; append notify on }
    default { append cmd_sub " $cmd_set"; append notify on }
  }
  if {[string length $arg]} {
    set arg [string range $arg 1 end]
    exec {*}$cmd_sub $arg
  }
  exec {*}$notify {*}[__nrep $title] $title [exec {*}$cmd $cmd_get]%
}

###############################################################################

# for waybar
proc net {} {
  set cmd {ifstat}
  set arg {-p}
  set dev {wlp0s20f3}
  set stat [exec $cmd {*}$arg $dev | grep $dev]

  proc fmt {n} {
    # KB/s
    return [format {%.2f} [expr $n / 1024.0]]
  }

  set rx [fmt [lindex $stat end-3]]
  set tx [fmt [lindex $stat end-1]]

  puts "_$rx^$tx"
}

###############################################################################

proc shot {args} {
  set one [lindex $args 0]
  set two [lindex $args 1]
  set three [lindex $args 2]
  set dir $::env(HOME)/got
  set opt {}
  set dst {}
  set desc {}
  set notify {notify-send -u normal -i image-x-generic}

  proc help {} {
    upvar 1 dir dir
    return "\[e_dited|*s_creen] \[j_pg|*p_ng] \[c]
  will save to: $dir"
  }

  if {3 < [llength $args]} {
    puts stderr "wrong number of arguments"
    ufail "shot [help]"
  }

  if {{} ne $three} {
    if {{c} eq $three} {
      append opt { -c}
    } else {
      puts stderr "unrecognised cursor enabling: $three"
      ufail "shot [help]"
    }
  }

  if {{} eq $two} {
    set two png
  }
  switch -- $two {
    j - jpg {
      set two jpg
      append opt { -t jpeg -q 90}
    }
    p - png {
      set two png
      append opt { -t png}
    }
    default {
      puts stderr "unrecognised image type: $two"
      ufail "shot [help]"
    }
  }

  if {{} eq $one} {
    set one screen
  }
  switch -- $one {
    e - edited {
      set one e
      append opt " -g"
      set desc "editing... editedshot-?.$two"
      set dst [list [exec slurp] - | swappy -f -]
    }
    s - screen {
      set desc screenshot-[exec date +%s].$two
      set dst $dir/$desc
    }
    default {
      puts stderr "unrecognised command: $one"
      ufail "shot [help]"
    }
  }

  if {{e} eq $one} {
    exec {*}$notify shot $desc
    exec grim {*}$opt {*}$dst
  } else {
    exec grim {*}$opt {*}$dst
    exec {*}$notify shot $desc
  }
}

###############################################################################

# for wm
proc vol {args} {
  set title vol
  set notify "notify-send [__nrep $title] -u low -i"

  # which?
  set devs [dict create \
    clip   00_12_6F_EE_F0_F7 \
    cx     00_1B_66_8C_6C_44 \
    earfun B0_F1_A3_63_0A_66 \
    fly    38_A2_8C_F9_CF_DF \
    jbl    00_12_6F_EE_F0_F7]
  set dev laptop
  set out {}
  set mic {}
  set base {ponymix --sink list}
  set basemic {ponymix --source list}
  switch -- [lindex $args 0] {
    {bt} {
      set args [lrange $args 1 end]
      set pat {: bluez_}
      if [catch {exec {*}$base | rg $pat}] {
        exec {*}$notify bluetooth-disabled $title {no bt audio}
        exit
      }
      set out [exec {*}$base | rg $pat | head -1 | cut {-d } -f3]
      set mic [exec {*}$basemic | rg $pat | head -1 | cut {-d } -f3]
      switch -regexp -- $out \
        [dict get $devs clip]   { set dev clip } \
        [dict get $devs cx]     { set dev cx } \
        [dict get $devs earfun] { set dev earfun } \
        [dict get $devs fly]    { set dev fly } \
        [dict get $devs jbl]    { set dev jbl } \
        default { fail {unrecognised device} }
    } \
    {usb} {
      set args [lrange $args 1 end]
      set pat {_output.usb-Apple__Inc._USB-C_to_}
      set patmic {_input.usb-Apple__Inc._USB-C_to_}
      if [catch {exec {*}$base | rg $pat}] {
        exec {*}$notify bluetooth-disabled $title {no audio dongle}
        exit
      }
      set out [exec {*}$base | rg $pat | head -1 | cut {-d } -f3]
      set mic [exec {*}$basemic | rg $patmic | head -1 | cut {-d } -f3]
      set dev dongle
    } \
    default {
      set patbase {pci-0000_00_1f}
      set pat {hw_sofhdadsp__sink}
      set patmic {hw_sofhdadsp__source}
      set out [exec {*}$base | rg $patbase | rg $pat | cut {-d } -f3]
      set mic [exec {*}$basemic | rg $patbase | rg $patmic | cut {-d } -f3]
    }
  }

  # mic?
  set ismic false
  if {{mic} eq [lindex $args 0]} {
    set args [lrange $args 1 end]
    set ismic true
  }

  # build command
  set cmdbase "ponymix --sink --device $out"
  if {$ismic} {
    set cmdbase "ponymix --source --device $mic"
  }
  set cmd $cmdbase
  switch -- [string index [lindex $args 0] 0] {
    {} {}
    x { append cmd { toggle} }
    - { append cmd " decrease [string range $args 1 end]" }
    + { append cmd " increase [string range $args 1 end]" }
    default { ufail {vol [bt] [mic] |x|-N|+N} }
  }

  # execute ponymix
  exec {*}$cmd

  # build notification
  switch -- [string index [lindex $args 0] 0] {
    {} {
      set arg " audio-ready"
      if {$ismic} { set arg " mic-ready" }
      append notify "$arg $title \"$dev [exec {*}$cmdbase get-volume]%\""
    }
    x {
      set arg " audio-off $title \"$dev muted\""
      if {$ismic} { set arg " mic-off $title \"$dev muted\"" }
      if [catch {exec {*}$cmdbase is-muted}] {
        set arg " audio-on $title \"$dev on\""
        if {$ismic} { set arg " mic-on $title \"$dev on\"" }
      }
      append notify $arg
    }
    - {
      set arg " audio-volume-medium"
      if {$ismic} { set arg " microphone-sensitivity-medium" }
      append notify "$arg $title \"$dev [exec {*}$cmdbase get-volume]%\""
    }
    + {
      set arg " audio-volume-high"
      if {$ismic} { set arg " microphone-sensitivity-high" }
      append notify "$arg $title \"$dev [exec {*}$cmdbase get-volume]%\""
    }
  }
  exec {*}$notify
}

###############################################################################

# for waybar
proc weather {} {
  catch {exec curl -s {https://wttr.in/?0AQT&format=%t%x}} weather ret
  if {0 != [dict get $ret -code]} { puts {}; exit }
  if {{U} eq [string index $weather 0]} { puts {?}; exit }
  regexp {^\+?([0-9-]+.)C(.*)$} $weather weather deg sky
  switch -- $sky {
    o   { set sky  }
    =   { set sky  }
    mmm { set sky  }
    mm  { set sky  }
    m   { set sky  }
    /// { set sky  }
    //  { set sky  }
    /   { set sky  }
    .   { set sky  }
    x   { set sky  }
    x/  { set sky  }
    **  { set sky  }
    *   { set sky  }
    */* { set sky  }
    */  { set sky  }
    /!/ { set sky  }
    !/  { set sky  }
    *!* { set sky  }
  }
  puts "$deg$sky"
}

###############################################################################

set arg [lindex $::argv 0]
if {0 eq [llength [info procs $arg]]} {
  ufail {btbat|cpu|lay|lum|net|shot|vol|weather
  btbat   get battery level of bluetooth device
  cpu     get cpu governor
  lay     [gs]et keyboard layout   _|h_hsnt|q_werty
  lum     [gs]et screen brightness _|-N|+N
  net     get net usage
  shot    take screenshot          _|active|*screen*|select |jpg|*png* |c
  vol     [gs]et audio volume      _|bt |mic |x|-N|+N
  weather get weather report}
}
$arg {*}[lrange $::argv 1 end]

