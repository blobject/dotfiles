#! /usr/bin/env tclsh

###############################################################################
# 0t: utilities/shortcuts for the graphical shell

source $::env(HOME)/bin/lib.tcl

need notify-send \
     rg \
     firefox \
     fuzzel \
     hyprctl \
     wl-copy \
     bluetoothctl \
     ifstat \
     light \
     grim slurp swappy \
     wpctl
     #wlr-randr \

set ICONS /usr/share/icons/Papirus/24x24

###############################################################################

# helper: notify-send hinting for deduplication
proc __nrep {name} {
  return "--hint=string:wired-tag:$name"
}

###############################################################################

# helper: notify-send hinting for icons
proc __nicon {icon} {
  global ICONS

  return "--hint=string:image-path:$ICONS/$icon"
}

###############################################################################

# for wm
proc _browser {} {
  try {
    exec firefox --private-window --profile "$::env(HOME)/opt/f1"
  } on error e { fail "$e" }
}

###############################################################################

# for wm
proc _bye {} {
  set runner "fuzzel --dmenu --lines=11 {--prompt= } --width=28"
  set menu {\
    {Lock} system-lock-screen\
    {Logout, exit, quit} system-log-out\
    {Sleep, standby, suspend} system-suspend\
    {Reboot, restart} system-reboot\
    {Shutdown, halt} system-shutdown\
  }
  set menustr {}
  foreach {name icon} $menu {
    append menustr "$name\\0icon\\x1f$icon\n"
  }
  set menustr [string trimright $menustr "\n"]
  if {[catch {exec echo -e $menustr | {*}$runner} what]} {
    return
  }
  set whats [split [string map [list {, } \x00] $what] \x00]
  set what [string tolower [lindex $whats 0]]
  exec 0s bye $what
}

###############################################################################

# for wm

proc _decor {} {
  set title decor
  set notify "notify-send -u low -i"
  set on [exec hyprctl getoption animations:enabled | awk {NR==1{print $2}}]
  set next {}
  set icon redshift-status-off

  if {$on} {
    set next off
    set icon desktoptrusted
    exec hyprctl --batch {
      keyword animations:enabled 0;
      keyword decoration:shadow:enabled 0;
      keyword decoration:blur:enabled 0;
      keyword general:gaps_in 0;
      keyword general:gaps_out 0;
      keyword general:border_size 1;
      keyword decoration:rounding 0
    }
  } else {
    set next on
    set icon disper-panel
    exec hyprctl reload
  }

  exec {*}$notify $icon $title $next
}

###############################################################################

# for wm
proc _emo {} {
  set emoticons $::env(HOME)/opt/emoticons
  set runner "fuzzel --dmenu {--prompt= } --width=64"
  if {[catch {exec cat $emoticons | {*}$runner} what]} {
    return
  }
  exec wl-copy [lindex $what 0]
}

###############################################################################

# for wm, implicit lum change
proc _lum {arg} {
  set title lum
  set icon_lo redshift-status-off
  set icon_hi redshift-status-on
  set icon {}
  set notify "notify-send -u low -i"

  switch -- $arg {
    - { set icon $icon_lo }
    + { set icon $icon_hi }
  }

  exec sleep 0.1
  exec {*}$notify $icon $title "[format %.0f [exec light -G]]"
}

###############################################################################

# for wm
proc _win {} {
  set exp {\
    sort_by(.focusHistoryID) .[] |\
    (.workspace.name | sub("^special:scratch$"; "#"))\
    + " " + .class\
    + " : " + .title\
    + " ::: " + .address\
  }
  set lines [exec hyprctl -j clients | jq -r $exp]
  set lenmin 48
  set lenmax 128
  set longest 0
  foreach {line} [split $lines "\n"] {
    set len [string length $line]
    if {$len > $longest} { set longest [expr $len + 2] }
  }
  if {$longest > $lenmax} { set longest $lenmax }
  if {$longest < $lenmin} { set longest $lenmin }
  set runner "fuzzel --dmenu {--prompt= } --width=$longest"
  if {[catch {exec echo $lines | {*}$runner} what]} {
    return
  }
  set win [lindex $what end]
  exec hyprctl dispatch focuswindow address:$win
}

###############################################################################

# for waybar
proc btbat {{id {}}} {
  set k          DD:A5:E3:61:B3:96
  set earfun     00:12:6F:EE:F0:F7
  set jbl        B0:F1:A3:63:0A:66
  set nothing    2C:BE:EB:78:2B:3B]

  proc die {} {
    global ME
    upvar k k earfun earfun jbl jbl nothing nothing

    puts stderr "$ME: mac address required
  available devices:
  k          - Corne keyboard       $k
  earfun     - EarFun Free Pro 2    $earfun
  jbl        - JBL Clip 2           $jbl
  nothing    - Nothing Ear          $nothing"
    puts {}
    exit
  }

  try { eval set mac $$id } trap {} {} { die }
  if {{} eq $id} { die }

  if {![catch {exec bluetoothctl info $mac | rg {Connected: yes}}]} { puts {}; exit }

  regsub -all {:} $mac {_} mac
  set icon { }
  if {{k} eq $id} { set icon { } }
  set blue "dbus-send --print-reply=literal --system --dest=org.bluez /org/bluez/hci0/dev_$mac"
  if {![catch {exec {*}$blue org.freedesktop.DBus.Introspectable.Introspect | rg {Battery1}}]} { puts {}; exit }

  puts "$icon[lindex [exec {*}$blue org.freedesktop.DBus.Properties.Get string:org.bluez.Battery1 string:Percentage] end]"
}

###############################################################################

# for waybar
proc cpu {} {
  set dir /sys/devices/system/cpu/cpu0
  set gov [readfile $dir/cpufreq/scaling_governor]
  #set epb [readfile $dir/power/energy_perf_bias]
  switch -- [string index $gov 1] {
    e { set gov {*}}
    o { set gov {.}}
    default { set gov {?}}
  }
  #puts "$gov$epb"
  puts $gov
}

###############################################################################

proc lay {arg} {
  global SESS

  set icon_lo preferences-desktop-keyboard
  set icon_hi cinnamon-virtual-keyboard

  if {{x} ne $SESS} {
    exec notify-send -u low -i $icon_lo key {xorg not running}
    exit
  }

  switch -- $arg {
    h - hsnt {
      set arg hsnt
      exec setxkbmap hsnt
      exec xset r rate 200 40
    }
    q - qwerty - u - us {
      set arg qwerty
      exec setxkbmap -option ctrl:nocaps us
      exec xset r rate 200 40
    }
    default {
      ufail {lay h_snt|q_werty}
    }
  }
  exec notify-send -u low -i $icon_hi key $arg
}

###############################################################################

# for wm, explicit lum change
proc lum {arg} {
  set title lum
  set notify "notify-send -u low -i"
  set cmd {light}
  set cmd_set {-S}
  set cmd_dec {-U}
  set cmd_inc {-A}
  set cmd_get {-G}
  set cmd_sub $cmd
  set icon_lo redshift-status-off
  set icon_hi redshift-status-on
  set icon $icon_hi

  switch -- [string index $arg 0] {
    {} {}
    - { append cmd_sub " $cmd_dec"; set icon $icon_lo }
    + { append cmd_sub " $cmd_inc" }
    default { append cmd_sub " $cmd_set" }
  }
  if {[string length $arg]} {
    set arg [string range $arg 1 end]
    exec {*}$cmd_sub $arg
  }
  exec {*}$notify $icon $title [exec {*}$cmd $cmd_get]%
}

###############################################################################

# for wm
proc mon {{arg {}}} {
  set title mon
  set dev {eDP-1}
  set cmd_base "wlr-randr --output $dev"
  set cmd_on "$cmd_base --on"
  set cmd_off "$cmd_base --off"
  set cmd_toggle "$cmd_base --toggle"

  switch -- [string index $arg 0] {
    {} { exec {*}$cmd_toggle }
    o - on { exec {*}$cmd_on }
    x - off { exec {*}$cmd_off }
  }
}

###############################################################################

# for waybar
proc net {} {
  set cmd {ifstat}
  set arg {--json --pretty}
  set dev {wlp0s20f3}
  set stat [exec $cmd {*}$arg $dev]

  proc fmt {n} {
    # KB/s
    return [format {%.2f} [expr $n / 1024.0 / 1024.0]]
  }

  set rx [fmt [exec echo $stat | jq ".kernel.$dev.rx_bytes"]]
  set tx [fmt [exec echo $stat | jq ".kernel.$dev.tx_bytes"]]

  puts "_$rx^$tx"
}

###############################################################################

proc shot {args} {
  set one [lindex $args 0]
  set two [lindex $args 1]
  set three [lindex $args 2]
  set dir $::env(HOME)/got
  set opt {}
  set dst {}
  set desc {}
  set icon image-x-generic
  set notify "notify-send -u normal -i $icon"

  proc help {} {
    upvar 1 dir dir
    return "\[e_dited|*s_creen] \[j_pg|*p_ng] \[c]
  will save to: $dir"
  }

  if {3 < [llength $args]} {
    puts stderr "wrong number of arguments"
    ufail "shot [help]"
  }

  if {{} ne $three} {
    if {{c} eq $three} {
      append opt { -c}
    } else {
      puts stderr "unrecognised cursor enabling: $three"
      ufail "shot [help]"
    }
  }

  if {{} eq $two} {
    set two png
  }
  switch -- $two {
    j - jpg {
      set two jpg
      append opt { -t jpeg -q 90}
    }
    p - png {
      set two png
      append opt { -t png}
    }
    default {
      puts stderr "unrecognised image type: $two"
      ufail "shot [help]"
    }
  }

  if {{} eq $one} {
    set one screen
  }
  switch -- $one {
    e - edited {
      set one e
      append opt " -g"
      set desc "editing... editedshot-?.$two"
      set dst [list [exec slurp -w 0] - | swappy -f -]
    }
    s - screen {
      set desc screenshot-[exec date +%s].$two
      set dst $dir/$desc
    }
    default {
      puts stderr "unrecognised command: $one"
      ufail "shot [help]"
    }
  }

  if {{e} eq $one} {
    # comment to dismiss notification if necessary
    exec {*}$notify shot $desc
    exec grim {*}$opt {*}$dst
  } else {
    exec grim {*}$opt {*}$dst
    exec {*}$notify shot $desc
  }
}

###############################################################################

proc term {} {
  set title term
  cd $::env(HOME)/.config/foot
  if {[file exists foot.ini.big]} {
    file rename -force foot.ini foot.ini.bak
    file rename -force foot.ini.big foot.ini
    exec notify-send -u low -i foot $title big
  } elseif {[file exists foot.ini.bak]} {
    file rename -force foot.ini foot.ini.big
    file rename -force foot.ini.bak foot.ini
    exec notify-send -u low -i foot $title regular
  } else {
    exec notify-send -u low -i foot $title {config not found}
  }
}

###############################################################################

# vol helper
proc vol_get_device_id {status kind name} {
  set in_sources 0
  set id {}

  if {{} eq $kind || {} eq $name} {
    return $id
  }

  foreach line [split $status "\n"] {
    if {[regexp "^\[^0-9\]*$kind:" $line]} {
      set in_sources 1
      continue
    }
    if {$in_sources} {
      if {![regexp {^[^0-9]*[0-9]+} $line]} {
        break
      }
      if {[regexp "^\[^0-9\]*(\[0-9\]+)\.\\s+$name" $line -> match]} {
        puts $line
        set id $match
        break
      }
    }
}

  return $id
}

# vol helper
proc vol_get_current_device {status kind devices} {
  set id {}
  set available_devices {}
  set in_kind 0
  set prepat {^[^0-9]*([0-9]+)\.\s+}

  foreach line [split $status "\n"] {
    if {[regexp "^\[^0-9\]*$kind:" $line]} {
      set in_kind 1
      continue
    }
    if {$in_kind} {
      if {![regexp {^[^0-9]*[0-9]+} $line]} {
        break
      }
      lappend available_devices $line
    }
  }

  foreach device $devices {
    foreach available_device $available_devices {
      if {{} ne $id} {
        break
      }
      if {[regexp "$prepat$device" $available_device -> match]} {
        set id $match
        break
      }
    }
  }

  return $id
}

# vol helper
proc vol_format_volume {volume} {
  regexp {^Volume:\s([0-9.]+)} $volume -> vol
  return [expr int($vol * 100)]
}

# for wm
proc vol {args} {
  set title vol
  set cmd wpctl
  set notify "notify-send -u low -i"
  set status [exec $cmd status]

  set default_device_name {Built-in Audio Analog Stereo}
  set bt_device_names [dict create \
    earfun     {EarFun Free Pro 2} \
    earfunmic  {bluez_input.B0:F1:A3:63:0A:66} \
    fly        {wip_fly} \
    jbl        {JBL Clip 2} \
    jblmic     {bluez_input.00:12:6F:EE:F0:F7} \
    nothing    {Nothing Ear} \
    nothingmic {bluez_input.2C:BE:EB:78:2B:3B}]
  set usb_device_names [dict create \
    usb {USB-C to 3.5mm Headphone Jack Adapter}]
  set icon_bt_lo bluetooth-disabled
  set icon_usb drive-removable-media-usb-symbolic
  set icon_vol_good audio-ready
  set icon_vol_off audio-off
  set icon_vol_on audio-on
  set icon_vol_lo audio-volume-medium
  set icon_vol_hi audio-volume-high
  set icon_mic_good mic-ready
  set icon_mic_off mic-off
  set icon_mic_on mic-on
  set icon_mic_lo microphone-sensitivity-medium
  set icon_mic_hi microphone-sensitivity-high

  set ismic false
  set device_kind Sinks
  set device_names {}
  set device_id {}
  set device laptop
  set volume {}
  set icon_no_device $icon_usb
  set icon {}
  set notify_body {}

  # determine category & id
  switch -- [lindex $args 0] {
    {bt} {
      set args [lrange $args 1 end]
      set device bt
      set device_names [dict values $bt_device_names]
      if {{} eq $device_id} {
        set icon_no_device $icon_bt_lo
        set notify_body {no bt audio}
      }
    }
    {usb} {
      set args [lrange $args 1 end]
      set device usb
      set device_names [dict values $usb_device_names]
      if {{} eq $device_id} {
        set icon_no_device $icon_usb
        set notify_body {no usb audio}
      }
    }
    default {
      set device_names [list $default_device_name]
    }
  }

  if {{mic} eq [lindex $args 0]} {
    set args [lrange $args 1 end]
    set ismic true
    set device_kind Sources
  }

  set device_id [vol_get_current_device $status $device_kind $device_names]
  if {$ismic && {} eq $device_id} {
    set device_kind Filters
    set device_id [vol_get_current_device $status $device_kind $device_names]
  }

  # determination fail
  if {{} eq $device_id} {
    if {$ismic} { set notify_body "$notify_body mic" }
    exec {*}$notify $icon_no_device $title $notify_body
    exit
  }

  # adjust
  set volume [exec $cmd get-volume $device_id]

  switch -- [string index [lindex $args 0] 0] {
    {} {
      set cmd {}
      set icon $icon_vol_good; if {$ismic} { set icon $icon_mic_good }
      set notify_body "$device [vol_format_volume $volume]%"
    }
    x {
      set cmd "$cmd set-mute $device_id toggle"
      set icon $icon_vol_off
      set notify_body "$device muted"
      if {$ismic} {
        set icon $icon_mic_off
        set notify_body "$device mic muted"
      }
      if {[regexp {MUTED} $volume]} {
        set icon $icon_vol_on
        set notify_body "$device on"
        if {$ismic} {
          set icon $icon_mic_on
          set notify_body "$device mic on"
        }
      }
    }
    - {
      set amount [string range $args 1 end]
      if {{} eq $amount} { set amount 2 }
      set cmd "$cmd set-volume $device_id $amount%-"
      set icon $icon_vol_lo; if {$ismic} { set icon $icon_mic_lo }
      set notify_body {}
    }
    + {
      set amount [string range $args 1 end]
      if {{} eq $amount} { set amount 2 }
      set cmd "$cmd set-volume $device_id $amount%+"
      set icon $icon_vol_hi; if {$ismic} { set icon $icon_mic_hi }
      set notify_body {}
    }
  }

  # execute
  if {{} ne $cmd} { exec {*}$cmd }
  if {{} eq $notify_body} {
    set notify_body "$device [vol_format_volume [exec wpctl get-volume $device_id]]%"
  }
  exec {*}$notify $icon $title $notify_body
}

###############################################################################

# for waybar
proc weather {} {
  if {[catch {exec curl -s {https://wttr.in/sg?0AQT&format=%t%x}} weather]} { puts {}; exit }
  if {{U} eq [string index $weather 0]} { puts {?}; exit }
  regexp {^\+?([0-9-]+.)C(.*)$} $weather weather deg sky
  if {{} eq $weather} { puts {?}; exit }
  switch -- $sky {
    o   { set sky  }
    =   { set sky  }
    mmm { set sky  }
    mm  { set sky  }
    m   { set sky  }
    /// { set sky  }
    //  { set sky  }
    /   { set sky  }
    .   { set sky  }
    x   { set sky  }
    x/  { set sky  }
    **  { set sky  }
    *   { set sky  }
    */* { set sky  }
    */  { set sky  }
    /!/ { set sky  }
    !/  { set sky  }
    *!* { set sky  }
  }
  puts "$deg$sky"
}

###############################################################################

set arg [lindex $::argv 0]
if {0 eq [llength [info procs $arg]]} {
  ufail {btbat|cpu|lay|lum|mon|net|shot|term|vol|weather
  btbat   get battery level of bluetooth device
  cpu     get cpu governor
  lay     [gs]et keyboard layout   _|h_hsnt|q_werty
  lum     [gs]et screen brightness _|-N|+N
  mon     toggle monitor           _|o|on|x|off
  net     get net usage
  shot    take screenshot          _|active|*screen*|select |jpg|*png* |c
  term    toggle terminal size
  vol     [gs]et audio volume      _|bt |mic |x|-N|+N
  weather get weather report}
}
$arg {*}[lrange $::argv 1 end]

