#! /usr/bin/env tclsh

###############################################################################
# 0k: desktop utilities related to the keyboard or accessed by it

source $::env(HOME)/bin/lib.tcl

need notify-send \
     setxkbmap \
     xbacklight light \
     grim slurp swappy \
     ponymix

###############################################################################

proc lay {} {
  global SESS

  if {{x} ne $SESS} {
    exec notify-send -u low -t 2000 -i preferences-desktop-keyboard key {xorg not running}
    exit
  }

  set arg [lindex $::argv 0]
  switch -- $arg {
    h - hsnt {
      set arg hsnt
      exec setxkbmap hsnt
      exec xset r rate 250 30
    }
    q - qwerty - u - us {
      set arg qwerty
      exec setxkbmap -option ctrl:nocaps us
      exec xset r rate 250 30
    }
    default {
      usage {lay h_snt|q_werty}
    }
  }
  exec notify-send -u low -t 2000 -i cinnamon-virtual-keyboard key $arg
}

###############################################################################

proc lum {} {
  global SESS

  set arg [lindex $::argv 0]
  set cmd {light}
  set cmd_set {-S}
  set cmd_dec {-U}
  set cmd_inc {-A}
  set cmd_get {-G}
  if {{x} eq $SESS} {
    set cmd {xbacklight}
    set cmd_set {-set}
    set cmd_dec {-dec}
    set cmd_inc {-inc}
    set cmd_get {-get}
  }
  set cmd_sub $cmd
  set notify {notify-send -u low -t 2000 -i redshift-status-}

  switch -- [string index $arg 0] {
    {} { append notify on }
    - { append cmd_sub " $cmd_dec"; append notify off; }
    + { append cmd_sub " $cmd_inc"; append notify on; }
    default { append cmd_sub " $cmd_set"; append notify on }
  }
  if {[string length $arg]} {
    set arg [string range $arg 1 end]
    exec {*}$cmd_sub $arg
  }
  exec {*}$notify lum [exec $cmd $cmd_get]%
}

###############################################################################

proc shot {} {
  global argc

  set one [lindex $::argv 0]
  set two [lindex $::argv 1]
  set three [lindex $::argv 2]
  set dir $::env(HOME)/got
  set opt {}
  set dst {}
  set desc {}
  set notify {notify-send -u normal -i image-x-generic}

  proc help {} {
    upvar 1 dir dir
    return "\[e_dited|*s_creen] \[j_pg|*p_ng] \[c]
  will save to: $dir"
  }

  if {3 < $argc - 1} {
    puts stderr "wrong number of arguments"
    usage "shot [help]"
  }

  if {{} ne $three} {
    if {{c} eq $three} {
      append opt { -c}
    } else {
      puts stderr "unrecognised cursor enabling: $three"
      usage "shot [help]"
    }
  }

  if {{} eq $two} {
    set two png
  }
  switch -- $two {
    j - jpg {
      set two jpg
      append opt { -t jpeg -q 90}
    }
    p - png {
      set two png
      append opt { -t png}
    }
    default {
      puts stderr "unrecognised image type: $two"
      usage "shot [help]"
    }
  }

  if {{} eq $one} {
    set one screen
  }
  switch -- $one {
    e - edited {
      set one e
      append opt " -g"
      set desc "editing... editedshot-?.$two"
      set dst [list [exec slurp] - | swappy -f -]
    }
    s - screen {
      set desc screenshot-[exec date +%s].$two
      set dst $dir/$desc
    }
    default {
      puts stderr "unrecognised command: $one"
      usage "shot [help]"
    }
  }

  if {{e} eq $one} {
    exec {*}$notify shot $desc
    exec grim {*}$opt {*}$dst
  } else {
    exec grim {*}$opt {*}$dst
    exec {*}$notify shot $desc
  }
}

###############################################################################

proc vol {} {
  # vars
  set devs [dict create \
    laptop alsa_output.pci-0000_00_1f.3.analog-stereo \
    mic    alsa_input.pci-0000_00_1f.3.analog-stereo \
    cx     bluez_sink.00_1B_66_8C_6C_44.a2dp_sink \
    clip   bluez_sink.00_12_6F_EE_F0_F7.a2dp_sink ]
  set dev {}
  set ismic false
  set base "ponymix --sink --device "
  set cmd {}
  set notify {notify-send -u low -t 2000 -i}

  # which?
  if {{bt} ne [lindex $::argv 0]} {
    set dev laptop
  } else {
    set ::argv [lrange $::argv 1 end]
    if [catch {exec ponymix --sink list | grep {: bluez_}}] {
      exec {*}$notify bluetooth-disabled vol {no bt audio}
      exit
    } else {
      switch -- [exec ponymix --sink list \
                 | grep {: bluez_} | head -1 | cut {-d } -f3] \
        [dict get $devs cx]   { set dev cx } \
        [dict get $devs clip] { set dev clip } \
        default { fail {unrecognised device} }
    }
  }
  append base [dict get $devs $dev]
  set cmd $base

  # mic?
  if {{mic} eq [lindex $::argv 0]} {
    set ::argv [lrange $::argv 1 end]
    set ismic true
    set base "ponymix --source --device "
    if ![catch {exec ponymix --source list \
         | grep [exec echo [dict get $devs $dev] | cut -d. -f2] \
         | grep {\(source\.\|input\.\)} \
         | cut {-d } -f3} \
         micdev] {
      append base $micdev
    } else {
      set dev laptop
      append base [dict get $devs mic]
    }
    set cmd $base
  }

  # build command
  switch -- [string index [lindex $::argv 0] 0] {
    {} {}
    x { append cmd { toggle} }
    - { append cmd " decrease [string range $::argv 1 end]" }
    + { append cmd " increase [string range $::argv 1 end]" }
    default { usage {vol [bt] [mic] |x|-N|+N}}
  }

  # execute ponymix
  exec {*}$cmd

  # build notification
  switch -- [string index [lindex $::argv 0] 0] {
    {} {
      set arg " audio-ready"
      if {$ismic} { set arg " mic-ready" }
      append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
    }
    x {
      set arg " audio-off vol \"$dev muted\""
      if {$ismic} { set arg " mic-off vol \"$dev muted\"" }
      if [catch {exec {*}$base is-muted}] {
        set arg " audio-on vol \"$dev on\""
        if {$ismic} { set arg " mic-on vol \"$dev on\"" }
      }
      append notify $arg
    }
    - {
      set arg " audio-volume-medium"
      if {$ismic} { set arg " microphone-sensitivity-medium" }
      append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
    }
    + {
      set arg " audio-volume-high"
      if {$ismic} { set arg " microphone-sensitivity-high" }
      append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
    }
  }
  exec {*}$notify
}

###############################################################################

set arg [lindex $::argv 0]
set ::argv [lrange $::argv 1 end]
switch -- $arg {
  lay  { lay; }
  lum  { lum; }
  shot { shot; }
  vol  { vol; }
  default {
    usage {lay|lum|shot|vol
  lay   keyboard layout    |h_hsnt|q_werty|b_ow
  lum   monitor luminance  |-N|+N
  shot  screenshot         |active|*screen*|select |jpg|*png* |c
  vol   audio volume       |bt |mic |x|-N|+N}
  }
}

