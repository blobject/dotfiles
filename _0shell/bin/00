#! /usr/bin/env tclsh

###############################################################################
# 00: commandline utility for opening a file based on its mimetype

source $::env(HOME)/bin/lib.tcl

need firefox-wayland foliate imv kak libreoffice mpv zathura

###############################################################################

set limit 64
# Order matters, and "txt" goes last because it is not external,
# ie. will occupy the parent shell.
# mappings:   type  prog             clon? ext?  types
dict set data 01doc {libreoffice     false true
  "text/rtf application/msword application/vnd.ms-powerpoint application/vnd.openxmlformats application/vnd.oasis.opendocument"}
dict set data 02scn {zathura         true  true
  "application/pdf application/x-pdf image/vnd.djvu image/x-djvu"}
dict set data 03img {imv             false true
  "image/"}
dict set data 04med {mpv             false true
  "audio/ video/ /ogg application/vnd.rn-realmedia"}
dict set data 05ebk {foliate         false true
  "application/epub"}
dict set data 06web {firefox-wayland false true
  "text/html"}
dict set data zztxt {kak             false false
  "text/plain text/x-"}

proc help {} {
  global ME data
  puts "$ME: need file(s) as argument"
  puts "  available bindings:"
  dict for {k v} $data {
    regsub {^..(.+)$} $k {\1} s
    puts "    $s\t> [lindex $v 0]"
  }

  exit 1
}

# Check a mimetype against the base data, and return the corresponding
# datum name or 0 if no match. Since datum names start with an alnum,
# returning 0 will render the "string compare" later in prep() false.
proc mapping {mime} {
  global data

  dict for {k v} $data {
    foreach i [lindex $v 3] {
      if {[string match *$i* $mime]} {
        return $k
      }
    }
  }

  return 0
}

proc add-dict-list {d k v} {
  if {![dict exists $d $k]} {
    dict set d $k {}
  }
  dict with d {append $k $v}
  return $d
}

proc add-dict-dict {d k1 k2 v} {
  if {![dict exists $d $k1 $k2]} {
    dict set d $k1 $k2 {}
  }
  dict with d $k1 {append $k2 $v}
  return $d
}

proc prep {task} {
  foreach f $::argv {
    if {![file readable $f]} {
      set task [add-dict-list $task 0nex $f]
      continue
    }

    if {{link} eq [file type $f]} {
      set m [lindex [exec file -bi [exec readlink -f $f]] 0]
    } else {
      set m [lindex [exec file -bi $f] 0]
    }
    regsub {^[^:]+:\s+(.+)$} $m {\1} mt
    set m [mapping $mt]

    # append $ to file as delimiter
    if {0 < [string compare $m 0]} {
      set task [add-dict-list $task $m "$$mt^$f$"]
    } else {
      set task [add-dict-dict $task 0nom $mt "$f$"]
    }
  }

  return $task
}

###############################################################################

if {0 == $::argc} { help }
if {$limit < $::argc} { fail "too many arguments ($::argc > $limit)" }

puts -nonewline "processing $::argc file"
if {1 < $::argc} { puts s } else { puts "" }

set tasks {}

dict for {type files} [prep [dict create]] {
  switch -- $type {

    0nex {
      puts -nonewline "  nonexistent: "
      regsub -all "\\$" $files {, } fs
      regsub ",\\s*$" $fs {} fs
      puts $fs
    }

    0nom {
      puts "  untreated:"
      dict for {mime fs} $files {
        regsub ";" $mime {} mime
        regsub -all "\\$" $fs {, } fs
        regsub ",\\s*$" $fs {} fs
        puts "    \[$mime] $fs"
      }
    }

    default {
      global data
      set d [dict get $data $type]
      set cmd  [lindex $d 0]
      set mult [lindex $d 1]
      set ext  [lindex $d 2]
      set opt {>@stdout 2>@stderr}

      set mime [regexp -all -inline "\\$\[^;]+;" $files]
      regsub -all "\\$" $mime {} mime
      set mime [lsort -unique $mime]
      regsub -all ";" $mime {, } mime
      regsub ",\\s*$" [join $mime {}] {} mime
      set fs [regexp -all -inline "\\^\[^$]+\\$" $files]
      regsub -all "\\^" $fs {} fs
      regsub -all "\\$" $fs {, } fs
      regsub ",\\s*$" [join $fs {}] {} fs
      puts "  $cmd \[$mime]: $fs"
      if {$mult} {
        foreach f [split $files {$}] {if {{} ne $f} {
          regsub "\[^;]+;\\^" $f {} f
          lappend tasks [list "$opt $cmd" "\"$f\""]
        }}
      } else {
        set fs {}
        foreach f [split $files {$}] {if {{} ne $f} {
          regsub "\[^;]+;\\^" $f {} f
          lappend fs $f
        }}
        lappend tasks [list "$opt $cmd" $fs]
      }
    }
  }
}

foreach t $tasks {
  catch {exec {*}[lindex $t 0] {*}[lindex $t 1]}
}

