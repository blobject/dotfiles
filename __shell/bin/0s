#! /usr/bin/env tclsh

###############################################################################
# 0s: utilities/shortcuts for the system

set home $::env(HOME)
if {{root} eq $::tcl_platform(user)} { set home /home/b }
source $home/bin/lib.tcl
unset home

need notify-send \
     hyprctl \
     hyprlock \
     dracut \
     rsync xbps-query \
     0snooze-bat 0snooze-temper snooze \
     tlp

set SUDO /usr/sbin/sudo
set ICONS /usr/share/icons/Papirus/24x24

###############################################################################

# helper: notify-send hinting for deduplication
proc _nrep {name} {
  return "--hint=string:wired-tag:$name"
}

###############################################################################

# helper: notify-send hinting for icons
proc _nicon {icon} {
  global ICONS

  return "--hint=string:image-path:$ICONS/$icon"
}

###############################################################################

proc bat {} {
  set title bat
  set device BAT0
  set crit 5
  set lo 20
  set hi 80
  set icon_crit [_nicon panel/battery-010.svg]
  set icon_lo [_nicon panel/battery-020.svg]
  set icon_hi [_nicon panel/battery-080-charging.svg]
  set notify "notify-send"

  set dir /sys/class/power_supply/$device
  set capacity [readfile $dir/capacity]
  set status [readfile $dir/status]

  switch -- [string index $status 0] {
    {D} {
      if {$capacity <= $crit} {
        exec {*}$notify -u critical -t 0 $icon_crit $title $capacity%
      } elseif {[expr {$lo - 5}] <= $capacity && $capacity <= $lo} {
        exec {*}$notify -u normal $icon_lo $title $capacity%
      }
    }
    {C} {
      if {$hi <= $capacity && $capacity <= [expr {$hi + 2}]} {
        exec {*}$notify -u low $icon_hi $title $capacity%
      }
    }
  }
}

###############################################################################

proc bye {arg} {
  global SESS SUDO

  proc kill {} {
    catch {exec pkill dbus-daemon}
    catch {exec pkill dbus-launch}
    catch {exec pkill pipewire-pulse}
    catch {exec pkill pipewire}
    catch {exec pkill wireplumber}
  }

  proc save {} {
    global LOGW LOGX

    foreach f "$LOGW $LOGX" {
      if {[file exists $f]} {
        file rename -force -- $f $f.old
      }
    }
  }

  proc sync {} {
    exec 0s temper
  }

  switch -- $arg {
    k - o - lock {
      if {{w} ne $SESS} {
        return
      }
      set locker hyprlock
      if {0 == [catch {exec pidof $locker}]} {
        puts {0s: locking canceled, already locked}
        return
      }
      puts {0s: locking...}
      catch {exec $locker}
    }
    e - l - q - x - logout {
      puts {0s: logging out...}
      save
      kill
      set desk $::env(XDG_SESSION_DESKTOP)
      switch -- $desk {
        Hyprland {
          exec hyprctl dispatch exit
        }
        default {
          exec pkill $desk
        }
      }
    }
    z - sleep - standby - suspend {
      puts {0s: sleeping...}
      sync
      exec $SUDO /bin/zzz -S
    }
    b - r - restart - reboot {
      puts {0s: rebooting...}
      save
      sync
      kill
      exec $SUDO /bin/reboot
    }
    h - s - halt - shutdown {
      puts {0s: shutting down...}
      save
      sync
      kill
      exec $SUDO /bin/halt
    }
    default {
      ufail {bye k|o|lock | e|l|q|x|logout | z|sleep|standby|suspend | b|r|restart|reboot | h|s|halt|shutdown}
    }
  }
}

###############################################################################

proc doze {{sec 60}} {
  global SUDO

  set threshold 10
  if {[expr {5 > $sec}]} {
    fail {check interval too low}
  }
  if {[expr {1800 < $sec}]} {
    fail {check interval too high}
  }
  set f /sys/class/power_supply/BAT0/capacity
  while true {
    exec sleep $sec
    set perc [readfile $f]
    if {[expr {$perc < $threshold}]} {
      exec $SUDO /bin/zzz -S
      return
    }
  }
}

###############################################################################

proc dracut {ver} {
  global SUDO

  exec -- >@stdout 2>@stderr $SUDO /usr/bin/dracut \
    --conf $::env(HOME)/cfg/opt/_kernel/dracut.conf \
    --force \
    /boot/initramfs-${ver}_c.img ${ver}_c
}

###############################################################################

proc save {} {
  global TMPD

  set dst $::env(HOME)/bak/save
  set nam [exec hostname]
  set tmp ${nam}_[clock format [clock seconds] -gmt true -format %y%m%d-%H%M%S]
  set src $TMPD/$tmp
  set zip $tmp.tgz
  set want "$::env(HOME)/cfg/*dotfiles \
            $::env(HOME)/.gnupg/*gnupg \
            $::env(HOME)/.ssh/*ssh"

  proc msg {s} { puts "### $s ###" }

  proc sep {} { puts "--------------------" }

  proc prep {src nam tmp} {
    if {[file isdirectory $src]} {
      file delete -force $src
    }
    file mkdir $src
    set f [open $src/LOG w]; puts $f $tmp; close $f
    sep
    puts "created $src\nsaving \"$nam\" customisations:"
  }

  proc copy {src} {
    upvar 1 want want

    # there cannot be asterisk (*) anywhere except as file*name separator
    # as specified in this declaration. see copy()
    foreach i $want {
      lassign [split $i *] f n
      if {{} eq $n} {
        regsub {^\.(.+)$} [file tail $f] {\1} m
        set n $m
      }
      if {![file readable $f]} {
        msg "invalid file $f"
        continue
      }
      if {[file readable $src/$n]} {
        msg "name \"$n\" already exists"
        continue
      }
      if {[file isfile $f]} {
        if {[catch {exec cp -d $f $src/$n}]} {
          msg "error copying $f"
          continue
        }
      } elseif {[file isdirectory $f]} {
        if {[catch {exec rsync -lr --exclude=.git $f $src/$n}]} {
          msg "error copying $f"
          continue
        }
        set n $n/
      } else {
        msg "$f is neither file nor dir"
        continue
      }
      puts "* $f  ($n)"
      set p [open $src/LOG a]; puts $p "$f * %n"; close $p
    }
  }

  proc etc {src} {
    exec cp /etc/fstab $src/fstab
    puts "* fstab"
    exec lsmod >$src/lsmod
    puts "* lsmod"
    exec tail -n +1 {*}[glob /etc/modprobe.d/*] >$src/modprobe
    puts "* modprobe"
    exec tail -n +1 {*}[glob /etc/wpa_supplicant/wpa_supplicant-wl*] >$src/wpa
    puts "* wpa"
    exec tail -n +1 {*}[glob /etc/X11/xorg.conf.d/*] >$src/xorg
    puts "* xorg"
    exec ls "$::env(HOME)/opt/" >$src/opt
    puts "* ~/opt/"
    exec cp /boot/EFI/refind/refind.conf $src/refind
    puts "* refind"
    exec xbps-query --list-pkgs >$src/installed
    puts "* packages installed"
    exec ls /var/service/ >$src/services
    puts "* services enabled"
  }

  proc save {src nam dst} {
    cd $src/..
    if {[catch {exec tar czf $dst $nam}]} { fail "error zipping" }
  }

  proc fin {src zip dst} {
    if {[file isdirectory $src]} { file delete -force $src }
    puts "removed $src"
    set p [open |[list du -hs $dst/$zip] r]
    regsub {^(\S+).+$} [read $p] {\1} size
    close $p
    sep
    puts "$zip ($size) saved in $dst"
  }

  prep $src $nam $tmp
  copy $src
  etc  $src
  save $src $tmp $dst/$zip
  fin  $src $zip $dst
}

###############################################################################

proc snooze {} {
  proc dream {name} {
    if {0 == [catch {exec ps x | grep "snooze .* 0s $name$"}]} {
      puts {snooze $name already running}
      return
    }
    exec 0snooze-$name &
  }
  dream bat
  dream temper
}

###############################################################################

proc temper {} {
  global TMPD
  # taken from https://www.verot.net/firefox_tmpfs.htm

  set where $TMPD
  set flag .unpacked
  set what mozilla/firefox
  set name uiupka2h.default-default

  proc base {name} {
    return [lindex [file split $name] end]
  }

  #set once "\"$::env(XDG_DATA_HOME)/$what/sessions/default.yml \
  #            $::env(XDG_DATA_HOME)/bak/${what}_session.yml\""
  #         parent               link  stat   vola
  set cont "\"$::env(HOME)/.$what          $name _$name $where/[base $what]\" \
            \"$::env(XDG_CACHE_HOME)/$what $name _$name $where/[base $what]-cache\""

  proc log {msg} {
    global ME LOGW

    set f [open $LOGW a]
    puts $f "$ME: $msg"
    close $f
  }

  proc to_disk {link stat flag} {
    #global LOGW

    log {omitting to-disk rsync messages}
    # to emit: exec >>&$LOGW
    if {[catch {exec >&/dev/null rsync --archive --verbose --delete --exclude $flag ./$link/ ./$stat/}]} {
      log {error copying to disk}
    }
  }

  proc to_mem {stat link flag} {
    log {omitting to-mem rsync messages}
    if {[catch {exec >&/dev/null rsync --archive ./$stat/ ./$link/}]} {
      log {error copying to mem}
    }
    # touch flag
    close [open $link/$flag a]
  }

  proc backup {src dst} {
    file copy -force -- $src $dst
  }

  proc refresh {root link stat vola} {
    upvar 1 flag flag

    file mkdir $vola
    file attributes $vola -permissions 00700
    cd $root
    if {{link} ne [file type $link] || $vola ne [file readlink $link]} {
      file rename $link $stat
      file link $link $vola
    }
    if {[file exists $link/$flag]} {
      to_disk $link $stat $flag
      return
    }
    to_mem $stat $link $flag
  }

  file mkdir $where
  #foreach i $once {
  #  set src [lindex $i 0]
  #  set dst [lindex $i 1]
  #  log "(once) $src -> $dst"
  #  backup $src $dst
  #}
  foreach i $cont {
    set root [lindex $i 0]
    set link [lindex $i 1]
    log "(cont) $root/$link"
    refresh $root $link [lindex $i 2] [lindex $i 3]
  }
}

###############################################################################

proc tlp {} {
  # for wm
  global SUDO

  set title profile
  set gov [readfile /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor]
  set icon [_nicon panel/indicator-sensors-cpu.svg]
  switch -- [string index $gov 1] {
    e { set profile start; set message {tlp (auto)} }
    o { set profile ac; set message {full (manual)} }
    default { set profile ?; set message ? }
  }
  exec $SUDO tlp $profile
  exec notify-send -u low $icon $title $message
}

###############################################################################

set arg [lindex $::argv 0]
if {0 == [llength [info procs $arg]]} {
  ufail {bat|bye|doze|dracut|save|snooze|temper|tlp
  bat     battery alert
  bye     stop session       lock|logout|sleep|reboot|shutdown
  doze    auto sleep         [5-1800]
  dracut  compile initramfs  KERNEL_VERSION
  save    backup data
  snooze  scheduled exec
  temper  www data to tmpfs
  tlp     toggle tlp profile}
}
$arg {*}[lrange $::argv 1 end]

